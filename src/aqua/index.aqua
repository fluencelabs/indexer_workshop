import Kademlia, Peer, Op, Debug from "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/aqua-ipfs/ipfs-api.aqua"
import "@fluencelabs/aqua-ipfs/ipfs.aqua"

import Record from "@fluencelabs/registry/registry-service.aqua"

import "services.aqua"
import "console.aqua"

-- retrieve IPFS node address
func get_multiaddr(peer_id: string) -> string:
    result <- get_external_api_multiaddr(peer_id)
    <- result.multiaddr

-- upload via local ipfs-client
func upload(multiaddr: string, path: string) -> string:
    on INIT_PEER_ID via HOST_PEER_ID:
        cid <- IpfsClient.upload(multiaddr, path)
        <- cid

-- check if exists via local ipfs-client
func exists(multiaddr: string, cid: string) -> bool:
    on INIT_PEER_ID via HOST_PEER_ID:
        does <- IpfsClient.exists(multiaddr, cid)
        <- does

-- purge nodes from index if it doesn't contain the file anymore
func update_local_index(cid: string) -> []Provider, []Provider:
    providers <- LocalIndex.get(cid)
    for provider <- providers:
        e <- IpfsClient.exists(provider.multiaddr, cid)
        if e == false:
            LocalIndex.remove(cid, provider.peer_id, provider.multiaddr)
    providers_after <- LocalIndex.get(cid)
    <- providers, providers_after

func retrieve_index(cid: string, subnet: []Record) -> []Provider:
    provider_sets: *[]Provider
    alive: *Record
    for peer <- subnet par:
        on peer.peer_id via peer.relay_id:
            RemoteIndex peer.service_id!
            provider_sets <- RemoteIndex.get(cid)
            alive <<- peer
    join provider_sets[RecordOp.array_length(subnet) - 1]
    par Peer.timeout(PARTICLE_TTL / 4, "")

    -- take random alive peer, and use it to deduplicate provider_sets
    someone = RecordOp.identity(alive[0])
    on someone.peer_id via someone.relay_id:
        RemoteIndex someone.service_id!
        providers <- RemoteIndex.multi_merge(provider_sets)

    <- providers

-- returns absent and present
func whos_absent(cid: string, providers: []Provider) -> []Provider, []Provider:
    absent: *Provider
    present: *Provider
    for provider <- providers:
        e <- IpfsClient.exists(provider.multiaddr, cid)
        if e:
            present <<- provider
        else:
            absent <<- provider
    <- absent, present

-- purge from index all nodes who lost the file
func update_remote_index(cid: string, subnet: []Record) -> []Provider, []Provider:
    providers <- retrieve_index(cid, subnet)
    absent, present <- whos_absent(cid, providers)

    -- remove absent from index
    for s <- subnet par:
        on s.peer_id via s.relay_id:
            RemoteIndex s.service_id!
            for a <- absent par:
                RemoteIndex.remove(cid, a.peer_id, a.multiaddr)

    providers_after <- retrieve_index(cid, subnet)
    <- providers, providers_after

-- replicate file to all nodes who has lost it
func repair_from_index(cid: string, subnet: []Record) -> string:
    providers <- retrieve_index(cid, subnet)

    completed: *string
    absent, present <- whos_absent(cid, providers)
    absent_length <- ProviderOp.array_length(absent)
    Console.print("absent:")
    Console.print(Debug.stringify(absent_length))

    timeout = PARTICLE_TTL / 2

    if absent_length > 0:
        for a <- absent par:
            success: *bool
            -- download file from every 'present' peer in parallel
            -- 'put' operation is idempotent; and we prioritize latency over resource
            for p <- present par:
                on a.peer_id:
                    res <- Ipfs.get_from(cid, p.multiaddr)
                    if res.success:
                        Ipfs.put(res.path)
                        success <<- true

            status: *string
            join success[0] -- wait for at least one repair success
            par Peer.timeout(timeout, "")
            completed <<- a.peer_id

        join completed[ProviderOp.array_length(absent) - 1]
        par Peer.timeout(timeout, "")
    <- "OK"

-- upload file to all nodes in the Kademlia neighborhood
func upload_to_peers(file: string, providers: []Record) -> string:
    on HOST_PEER_ID:
        cid <- upload(get_multiaddr(HOST_PEER_ID), file)

    uploaded: *[]string
    for p <- providers par:
        maddr <- get_multiaddr(p.peer_id)
        try:
            upload(maddr, file)
        if exists(maddr, cid):
            uploaded <<- [p.peer_id, maddr]
        else:
            ConsoleArray.print(["upload failed", p.peer_id, maddr])

    join uploaded[RecordOp.array_length(providers) - 1]
    par Peer.timeout(PARTICLE_TTL / 2, "")

    done: *bool
    for p <- providers par:
        on p.peer_id via p.relay_id:
            RemoteIndex p.service_id!
            for u <- uploaded:
                peer_id = u[0]
                maddr = u[1]
                RemoteIndex.add(cid, peer_id, maddr)
                done <<- true
    join done[RecordOp.array_length(providers) - 1]
    par Peer.timeout(PARTICLE_TTL / 8, "")

    Console.print("Uploaded:")
    Console.print(Debug.stringify(uploaded))

    <- cid

-- returns CID and Multiaddr
func upload_to_peer(peer: PeerId, file: string) -> CID:
    maddr <- get_multiaddr(peer)
    cid <- upload(maddr, file)
    <- cid

func remove_from_neigh(cid: string) -> string:
    on HOST_PEER_ID:
        neighborhood <- Kademlia.neighborhood(cid, nil, nil)

    for peer <- [neighborhood[0], neighborhood[3], neighborhood[5]]:
        multiaddr <- get_multiaddr(peer)
        res <- IpfsClient.remove(multiaddr, cid)
    <- "OK"