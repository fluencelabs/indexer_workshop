import "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/registry/resources-api.aqua"
import "@fluencelabs/registry/registry-service.aqua"
import "@fluencelabs/aqua-ipfs/ipfs-api.aqua"
import "@fluencelabs/aqua-ipfs/ipfs.aqua"
import "./console.aqua"
import "./services.aqua"

func pinset_name(domain: string) -> string:
    <- Op.concat_strings(domain, "-pinset")

func register_to_pinset(domain: string, peer_id: PeerId, service_id: ServiceID):
    name = pinset_name(domain)
    id, error <- createResourceAndRegisterNodeProvider(peer_id, name, "indexer", ?[service_id])

    if id == nil:
        ConsoleArray.print(["failed to register", peer_id, service_id, "to resource", Debug.stringify(error)])
    else:
        ConsoleArray.print(["registered", peer_id, service_id, "to resource", Debug.stringify(id)])


func resolve_pinset(domain: string) -> []Record:
    on HOST_PEER_ID:
        name = pinset_name(domain)
        id <- getResourceId(name, INIT_PEER_ID)
        providers, error <- resolveProviders(id, 1)

    if providers == nil:
        ConsoleArray.print(["failed to resolve providers", domain, id, Debug.stringify(error)])

    <- providers


-- 1. deploy index service
-- 2. add node-service to registry by app domain



--      Processes:
--      - Establish subnetwork
--        - Add index service to node
--        - Add node to registry
--      - Discover subnetwork
--        - Use registry to find subnetwork with index services
--      - Add file(s) to subnet
--        - On every node of subnet, push a file to ipfs
--        - Add this file to local index
--      - Get file(s) from subnet
--        - Query N nodes of subnet for smth
--        - Collect M <= N replies
--        - Go to some nodes, get files

--      - Before add â€“ we can mutate
--        - Go to subnet
--        - Get local state
--        - Apply computation
--        - Write local state
--        - Add it to local index service


-- func getResourceId(label: string, peer_id: string) -> ResourceId:
-- func createResourceAndRegisterProvider(label: string, value: string, service_id: ?string) -> ?ResourceId, *Error:
-- func registerProvider(resource_id: ResourceId, value: string, service_id: ?string) -> bool, *Error:
-- func resolveProviders(resource_id: ResourceId, ack: i16) -> []Record, *Error:
