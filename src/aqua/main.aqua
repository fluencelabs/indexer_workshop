import Debug, Peer, Srv, Op, Dist, Kademlia, ModuleConfig, PeerId from "@fluencelabs/aqua-lib/builtin.aqua"
import Ipfs from "@fluencelabs/aqua-ipfs/ipfs.aqua"
import Record from "@fluencelabs/registry/registry-service.aqua"

import upload, get_multiaddr, upload_to_peers, retrieve_index, repair_from_index, whos_absent from "index.aqua"
import Hash, CID, ServiceID, ArrayOp, RecordOp, ProviderOp from "services.aqua"
import Console, ConsoleArray from "console.aqua"

import "deploy.aqua"
import "pinsets.aqua"

const DOMAIN = "indexer-example"

func make_subnet(peers: []PeerId):
    srv <- LocalServices.get("index")
    services <- deploy_to_peers(peers, srv)

    domain <- create(DOMAIN)

    done: *bool
    for s <- services par:
        service_id = s[0]
        peer_id = s[1]
        done <- register_to_pinset(domain, peer_id, service_id)
    join done[ArrayOp.array_length(services) - 1]
    par Peer.timeout(PARTICLE_TTL / 5, "")

    providers <- resolve_pinset(DOMAIN)
    Console.print("pinset:")
    Console.print(Debug.stringify(RecordOp.array_length(providers)))

func make_subnet_from_neighs():
    on HOST_PEER_ID:
        neighborhood <- Kademlia.neighborhood(HOST_PEER_ID, nil, nil)

    make_subnet(neighborhood)

func upload_to_subnet(file: string):
    providers <- resolve_pinset(DOMAIN)
    if providers != nil:
        cid <- upload_to_peers(file, providers)
    else:
        Console.print("No providers found :(")

    index <- retrieve_index(cid, providers)
    Console.print("indexed ipfs providers:")
    Console.print(Debug.stringify(ProviderOp.array_length(index)))
    Console.print(Debug.stringify(index))

func get_domain_index(cid: string):
    Console.print(cid)
    providers <- resolve_pinset(DOMAIN)
    index <- retrieve_index(cid, providers)
    Console.print("indexed ipfs providers:")
    Console.print(Debug.stringify(ProviderOp.array_length(index)))
    for prov <- index:
        Console.print(Debug.stringify([prov.peer_id, prov.multiaddr]))

func repair(cid: string):
    Console.print(cid)
    providers <- resolve_pinset(DOMAIN)
    repair_from_index(cid, providers)

func absent(cid: string):
    Console.print(cid)
    providers <- resolve_pinset(DOMAIN)
    index <- retrieve_index(cid, providers)
    absent, present <- whos_absent(cid, index)
    Console.print("absent:")
    Console.print(Debug.stringify(absent))
